# -*- coding: utf-8 -*-
"""Test_1_Sept(9).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nTo8zC8vxfMsZCxjuqbhQSNrKvSjs3kK
"""

# print all the numbers between 1 and 500 divisible by 3 and sum of digits > 3.
for i in range(1,500):
  if i%3==0:
    s=0
    for j in str(i):
      s+=int(j)
    if s>10:
      print(i)

# Find all Armstrong numbers between 1 and 10,000
for i in range(1,10000):
  length=len(str(i))
  s=0
  for j in str(i):
    s+=int(j)**length
    if i==s:
      print(i)

# Print all Prime numbers between 1 and N, skip numbers ending with 3
def is_prime(num):
    if num<=1:
        return False
    if num ==2:
        return True
    if num%2==0:
        return False
    for i in range(3,int(num**0.5) +1,2):
        if num%i==0:
            return False
    return True
n=int(input("Enter the ending number: "))
for i in range(1,n):
  if is_prime(i):
    if str(i)[-1]!="3":
      print(int(i))

# Reverse a number without slicing using while loop
n=int(input("Enter a number >= 10: "))
rev=0
while n>0:
  digit=n%10
  rev=rev*10+digit
  n//=10
print(rev)

# Print first n fibonacci series using loops
n = int(input("Enter how many Fibonacci numbers you want to print: "))
fib_series = []
a, b = 0, 1
for _ in range(n):
    fib_series.append(a)
    a, b = b, a + b
print(f"The first {n} Fibonacci numbers are:")
print(fib_series)

# Print this pyramid pattern for N=5:
#    1
#   232
#  34543
# 4567654
#567898765
def print_pyramid_pattern(n):
    for i in range(1, n + 1):
        print(' ' * (n - i), end='')
        num = i
        for j in range(i):
            print(num, end='')
            num += 1
        num -= 2
        for j in range(i - 1):
            print(num, end='')
            num -= 1
        print()
N = 5
print_pyramid_pattern(N)

#  Print a spiral matrix of size NxN (numbers from 1 to N² in spiral order).
def generate_spiral_matrix(n):
    matrix = [[0]*n for _ in range(n)]
    top, bottom = 0, n - 1
    left, right = 0, n - 1

    num = 1

    while num <= n * n:
        for i in range(left, right + 1):
            matrix[top][i] = num
            num += 1
        top += 1
        for i in range(top, bottom + 1):
            matrix[i][right] = num
            num += 1
        right -= 1
        for i in range(right, left - 1, -1):
            matrix[bottom][i] = num
            num += 1
        bottom -= 1
        for i in range(bottom, top - 1, -1):
            matrix[i][left] = num
            num += 1
        left += 1

    return matrix
def print_matrix(matrix):
    for row in matrix:
        print(' '.join(f"{num:2}" for num in row))

N = 4
spiral = generate_spiral_matrix(N)
print_matrix(spiral)

# Print diamond pattern of '*' with odd rows only, e.g., for N=5:
'''
  *
 ***
 *****
 ***
  *
'''
def print_diamond(n):
    if n % 2 == 0:
        print("Please enter an odd number.")
        return

    mid = n // 2

    for i in range(n):
        if i <= mid:
            stars = 2 * i + 1
        else:
            stars = 2 * (n - i) - 1
        spaces = (n - stars) // 2
        print(' ' * spaces + '*' * stars)

N = 5
print_diamond(N)

'''
Generate Pascal’s Triangle up to N rows:
      1
     1 1
    1 2 1
   1 3 3 1
  1 4 6 4 1
'''
def generate_pascals_triangle(n):
    triangle = []

    for i in range(n):

        row = [1]

        if i > 0:

            prev_row = triangle[i-1]
            for j in range(1, i):
                row.append(prev_row[j-1] + prev_row[j])

            row.append(1)

        triangle.append(row)
    return triangle

def print_pascals_triangle(triangle):
    n = len(triangle)
    for i, row in enumerate(triangle):
        print(' ' * (n - i - 1), end='')
        print(' '.join(map(str, row)))

N = 5
triangle = generate_pascals_triangle(N)
print_pascals_triangle(triangle)

'''
Print alphabet triangle:
 A
 AB
 ABC
 ABCD
'''
def print_alphabet_triangle(n):
    for i in range(1, n + 1):
        row = ''.join(chr(ord('A') + j) for j in range(i))
        print(row)
N = 4
print_alphabet_triangle(N)

# Take marks and print grades (A, B, C, D, F) using match case:
import sys
marks=int(input("Enetr the total marks out of 100: "))
if marks>100 or marks<0:
  print("Invalid Input")
  sys.exit()
match marks:
        case s if s >= 90:
            print(f"Score {s}: Grade A")
        case s if 80 <= s < 90:
            print(f"Score {s}: Grade B")
        case s if 65 <= s < 80:
            print(f"Score {s}: Grade C")
        case s if 40 <= s < 65:
            print(f"Score {s}: Grade D")
        case _:
            print(f"Score {s}: Grade F")

#  FizzBuzz: Divisible by 7 -> Buzz, by 5 -> Fizz, both -> FizzBuzz.
num=int(input("Enter a number: "))
match num:
  case s if num%7==0 and num%5==0:
    print("FizzBuzz")
  case s if num%7==0:
    print("Buzz")
  case s if num%5==0:
    print("Fizz")

# Calculator using match case
import sys
num1= int(input("Enter first number: "))
num2= int(input("Enter second number: "))
if num1<0 or num2<1:
  print("Invalid Input")
  sys.exit()
operation=input("Which operation do you want to do (+ , - , * , / , %, ** , // ) ")
match operation:
  case s if operation=="+":
    print(num1+num2)
  case s if operation=="-":
    print(num1-num2)
  case s if operation=="*":
    print(num1*num2)
  case s if operation=="/":
    print(num1/num2)
  case s if operation=="%":
    print(num1%num2)
  case s if operation=="**":
    print(num1**num2)
  case s if operation=="//":
    print(num1//num2)

#Check if given year is leap year using if
year=int(input("Enter the year : "))
if (year%4==0 and year%100!=0) or year%400==0:
    print(f"The year {year} is leap year. ")
else:
    print(f"The year {year} is not a leap year.")

#Identify vowel, consonant, digit, or special character
import sys
import string
char=input("Enter a character: ")
if len(char)!=1:
  print("Invalid input, Enter only one character! ")
  sys.exit()
match char:
  case s if char.isdigit():
    print(f"{char} is a digit.")
  case s if char.isalpha():
    if char.lower() in "aeiou":
      print(f"{char} is a vowel.")
    else:
      print(f"{char} is a consonant.")
  case s:
    print(f"{char} is the special character.")

# Write function to find GCD and LCM of two numbers
import sys
def gcd(a,b):
  if a<=b:
    for i in range(1,a+1):
      if a%i==0 and b%i==0:
        ca=i
    return ca
  else:
    for i in range(1,b+1):
      if a%i==0 and b%i==0:
        ca=i
    return ca
def lcm(c,d):
  if c<=d:
    for i in range(1,c*d+1):
      if i%d==0 and i%c==0:
        return i
  else:
    for i in range(1,c*d+1):
      if i%d==0 and i%c==0:
        return i
num1=int(input("Enter the first number: "))
num2=int(input("Enter th second number: "))
if num1<0 or num2<0:
  print("Invalid Input.")
  sys.exit()
else:
  print(f'{gcd(num1,num2)} is the highest common factor.')
  print(f'{lcm(num1,num2)} is the lowest common multiple.')

# Find the second largest element in list without sort()
def second_largest(lst):
    first = second = float('-inf')
    for num in lst:
        if num > first:
            second = first
            first = num
        elif first > num > second:
            second = num
    return second

l = [10, 20, 4, 45, 99, 55]
print("Second largest element is:", second_largest(l))

# check if a string is a palindrome ignoring case and spaces
words=input("Give the word to check if its palindrome or not: ")
word=words.lower()
palindrome=lambda word : f"{words} is palindrome." if word==word[::-1] else f"{words} is not a palindrome."
print(palindrome(word))

# Print multiplication table for numbers up to N
n=int(input("Enter the number upto which you want to print the multiplication table: "))
for i in range(1,n+1):
  print(f"Multiplication of a table {i}")
  print()
  for j in range(1,11):
    print(f"{i} x {j} = {i*j}")
  print()

# Recursive function for sum of digits of a number
def sum_of_digits(n):
    if n < 10:
        return n
    else:
        return n % 10 + sum_of_digits(n // 10)
n=int(input("Enter the number: "))
print(f"The sum of digits of {n} is {sum_of_digits(n)}")

# Find all permutations of a string without itertools.
def permute(s):
    if len(s) == 1:
        return [s]
n=int(input("Enter the number: "))
print(permute(str(n)))

#Find all permutations of a string without itertools
def permute(s, l, r):
    if l == r:
        print(''.join(s))
    else:
        for i in range(l, r + 1):
            s[l], s[i] = s[i], s[l]  # swap
            permute(s, l + 1, r)
            s[l], s[i] = s[i], s[l]  # backtrack
string = "ABC"
n = len(string)
permute(list(string), 0, n - 1)

# Find longest palindrome substring in a string
def longest_palindrome(s):
    longest = ""
    for i in range(len(s)):
        for j in range(i, len(s)):
            substr = s[i:j+1]
            if substr == substr[::-1] and len(substr) > len(longest):
                longest = substr
    return longest

string = "babad"
print(longest_palindrome(string))

# Count frequency of each word ignoring case
def word_frequency(string):
    words = string.lower().split()
    frequency = {}
    for word in words:
        if word in frequency:
            frequency[word] += 1
        else:
            frequency[word] = 1
    return frequency
string = "This is a test string. This string is a test."
print(word_frequency(string))

# Check if two strings are anagrams without Counter.
def are_anagrams(str1, str2):
    str1 = str1.lower()
    str2 = str2.lower()
    if len(str1) != len(str2):
        return False
    char_count = {}
    for char in str1:
        char_count[char] = char_count.get(char, 0) + 1
    for char in str2:
        if char not in char_count or char_count[char] == 0:
            return False
        char_count[char] -= 1
    return True

string1 = "listen"
string2 = "silent"
print(f"'{string1}' and '{string2}' are anagrams: {are_anagrams(string1, string2)}")

string3 = "hello"
string4 = "world"
print(f"'{string3}' and '{string4}' are anagrams: {are_anagrams(string3, string4)}")

# Remove duplicate characters from a string preserving order.
def remove_duplicates(string):
    seen = set()
    result = ""
    for char in string:
        if char not in seen:
            seen.add(char)
            result += char
    return result
string = "hello"
print(remove_duplicates(string))

#  Rotate list k times to the right without slicing.
def rotate_list(lst, k):
    n = len(lst)
    k = k % n  # Handle cases where k is larger than the list length
    rotated = [0] * n
    for i in range(n):
        rotated[(i + k) % n] = lst[i]
    return rotated
my_list = [1, 2, 3, 4, 5]
k = 2
print(rotate_list(my_list, k))

# Merge two sorted lists into one sorted list without sorted().
def merge_sorted_lists(list1, list2):
    merged = []
    i, j = 0, 0
    while i < len(list1) and j < len(list2):
        if list1[i] < list2[j]:
            merged.append(list1[i])
            i += 1
        else:
            merged.append(list2[j])
            j += 1
    merged.extend(list1[i:])
    merged.extend(list2[j:])

    return merged

list1 = [1, 3, 5, 7]
list2 = [2, 4, 6, 8]
print("Merged sorted list:", merge_sorted_lists(list1, list2))

# Find longest increasing subsequence in a list.
def longest_increasing_subsequence(lst):
    if not lst:
        return []
    n = len(lst)
    dp = [1] * n
    for i in range(1, n):
        for j in range(i):
            if lst[i] > lst[j]:
                dp[i] = max(dp[i], dp[j] + 1)
    max_length = max(dp)
    max_index = dp.index(max_length)
    subsequence = []
    current_index = max_index
    for i in range(max_length - 1, -1, -1):
        subsequence.append(lst[current_index])
        for j in range(current_index - 1, -1, -1):
            if lst[j] < lst[current_index] and dp[j] == dp[current_index] - 1:
                current_index = j
                break
    return subsequence[::-1]

my_list = [10, 9, 2, 5, 3, 7, 101, 18]
print("Longest increasing subsequence:", longest_increasing_subsequence(my_list))

# Find all pairs in a list whose sum equals target.
def find_pairs_with_sum(lst, target):
    pairs = []
    seen = set()
    for num in lst:
        complement = target - num
        if complement in seen:
            pairs.append((num, complement))
        seen.add(num)
    return pairs

my_list = [2, 7, 11, 15, 5]
target = 9
print("Pairs with sum", target, ":", find_pairs_with_sum(my_list, target))

# Remove None and duplicates from a list.
def remove_none_and_duplicates(lst):
    result = []
    for item in lst:
        if item is not None and item not in result:
            result.append(item)
    return result

sample_list = [1, None, 2, 2, 3, None, 4, 1, 5, None]
cleaned_list = remove_none_and_duplicates(sample_list)
print("Original list:", sample_list)
print("Cleaned list:", cleaned_list)

# Swap two tuples without extra variables.
def swap_tuples(tuple1, tuple2):
    return tuple2, tuple1
tuple1 = (1, 2, 3)
tuple2 = ('a', 'b', 'c')
print(swap_tuples(tuple1, tuple2))

#  Element-wise sum of two same-length tuples.
def element_wise_sum(tuple1, tuple2):
    return tuple(a + b for a, b in zip(tuple1, tuple2))
t1 = (1, 2, 3)
t2 = (4, 5, 6)

print(element_wise_sum(t1, t2))

#  Convert list of tuples into a dictionary.
def list_of_tuples_to_dict(lst):
    return dict(lst)
tuple_list = [('a', 1), ('b', 2), ('c', 3)]
result = list_of_tuples_to_dict(tuple_list)
print(result)

# Function to count repeated elements in a tuple
def count_repeated_elements(t):
    count = {}
    for element in t:
        if element in count:
            count[element] += 1
        else:
            count[element] = 1

    repeated = {key: val for key, val in count.items() if val > 1}
    return repeated

# Example
t = (1, 2, 2, 3, 4, 4, 4, 5)
result = count_repeated_elements(t)
print(result)

#  Swap min and max elements in a tuple.
def swap_min_max(t):
    t_list = list(t)
    min_index = t_list.index(min(t_list))
    max_index = t_list.index(max(t_list))

    t_list[min_index], t_list[max_index] = t_list[max_index], t_list[min_index]
    return tuple(t_list)

t = (5, 2, 9, 1, 6)
result = swap_min_max(t)
print("Original tuple:", t)
print("After swapping min and max:", result)

#  Find elements in exactly two out of three sets.
def find_elements_in_two_sets(set1, set2, set3):
    result = set()
    for element in set1:
        if (element in set2 or element in set3) and element not in result:
            result.add
            result.add(element)
    return result
set1 = {1, 2, 3, 4}
set2 = {3, 4, 5, 6}
set3 = {5, 6, 7, 8}
print(find_elements_in_two_sets(set1, set2, set3))

# Check if two sets are disjoint without isdisjoint().
def are_disjoint(set1, set2):
    for element in set1:
        if element in set2:
            return False
    return True
set1 = {1, 2, 3}
set2 = {4, 5, 6}
print(are_disjoint(set1, set2))

#  Find symmetric difference of two sets manually.
def symmetric_difference(set1, set2):
    result = set1.copy()
    for element in set2:
        if element in result:
            result.remove(element)
        else:
            result.add(element)
    return result
set1 = {1, 2, 3, 4}
set2 = {3, 4, 5, 6}
print(symmetric_difference(set1, set2))

#  Create set of unique vowels in a string.
def unique_vowels(string):
    vowels = {'a', 'e', 'i', 'o', 'u'}
    unique = set()
    for char in string:
        if char.lower() in vowels:
            unique.add(char.lower())
            return unique
string = "hello"
print(unique_vowels(string))

#  Generate set of prime factors of a number.
def prime_factors(n):
    factors = set()
    i = 2
    while i * i <= n:
        while n % i == 0:
            factors.add(i)
            n //= i
        i += 1
    if n > 1:
        factors.add(n)
    return factors

number = 21
print(prime_factors(number))

# Count frequency of characters in a string using dictionary.
def char_frequency(string):
    frequency = {}
    for char in string:
        if char in frequency:
            frequency[char] += 1
        else:
            frequency[char] = 1
    return frequency
string = "hello"
print(char_frequency(string))

#  Merge two dictionaries and sum values of common keys.
def merge_dicts(dict1, dict2):
    merged = dict1.copy()
    for key, value in dict2.items():
        if key in merged:
            merged[key] += value
        else:
            merged[key] = value
    return merged
dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'b': 4, 'c': 5, 'd': 6}
print(merge_dicts(dict1, dict2))

#  Invert a dictionary (keys become values, values become keys).
def invert_dict(d):
    inverted = {}
    for key, value in d.items():
        inverted[value] = inverted.get(value, []) + [key]
    return inverted
my_dict = {'a': 1, 'b': 2, 'c': 1, 'd': 3}
print(invert_dict(my_dict))

# Group words by first letter using a dictionary.
def group_words(words):
    grouped = {}
    for word in words:
        first_letter = word[0]
        if first_letter in grouped:
            grouped[first_letter].append(word)
        else:
            grouped[first_letter] = [word]
    return grouped

word_list = ['apple', 'banana', 'cherry', 'date', 'elderberry']
print(group_words(word_list))

# Find the key with the highest value.
def find_key_with_highest_value(d):
    if not d:
        return None
    highest_value = float('-inf')
    highest_key = None
    for key, value in d.items():
        if value > highest_value:
            highest_value = value
            highest_key = key
    return highest_key

my_dict = {'a': 10, 'b': 5, 'c': 20, 'd': 15}
print(f"The key with the highest value is: {find_key_with_highest_value(my_dict)}")

my_dict2 = {}
print(f"The key with the highest value is: {find_key_with_highest_value(my_dict2)}")